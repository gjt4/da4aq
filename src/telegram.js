const c = global.chalk;
const Telegraf = global.telegraf;
const Keyboard = global.telegram_keyboard;
const { setConst, load, updateFile, getConst } = global.storage;
const log = global.log;

class TelegramBot {
    constructor(token) {
        this.bot = new Telegraf(token);

        process.once('SIGINT', () => this.bot.stop('SIGINT'));
        process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
        this.bot.catch((err) => {
            log(`–û—à–∏–±–∫–∞ –±–æ—Ç–∞ telegram: ${err}`, 'r');
        })
    }

    async run() {
        this.setupListeners();
        await this.setupBot();

        this.bot.launch();
        log(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ telegram –±–æ—Ç–∞ ${c.yellowBright(this.botInfo.username)} –∑–∞–ø—É—â–µ–Ω–æ.`, 'g');
    }

    async setupBot() {
        this.botInfo = await this.bot.telegram.getMe();
        this.bot.options.username = this.botInfo.username;

        this.mainKeyboard = this.getMainKeyboard();
        this.editGoodsKeyboard = this.getEditGoodsKeyboard();
        this.selectIssueTypeKeyboard = this.getSelectIssueTypeKeyboard();
        this.backKeyboard = this.getBackKeyboard();

        this.waitingForLotDelete = false;
        this.waitingForLotName = false;
        this.waitingForLotContent = false;
        this.lotType = '';
        this.lotName = '';
        this.lotContent = '';
        this.products = [];
    }

    setupListeners() {
        this.bot.on('text', (ctx) => this.onMessage(ctx));
        this.bot.on('inline_query', (ctx) => this.onInlineQuery(ctx));
    }
    
    async onMessage(ctx) {
        try {
            const msg = ctx.update.message.text;
            
            if(!this.isUserAuthed(ctx)) {
                ctx.reply('–ü—Ä–∏–≤–µ—Ç! üòÑ\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö FunPay Server, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞.');
                return;
            }
    
            if(msg == 'üî• –°—Ç–∞—Ç—É—Å üî•') {
                this.replyStatus(ctx);
                return;
            }
    
            if(msg == 'üöÄ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É üöÄ') {
                this.editAutoIssue(ctx);
                return;
            }

            if(msg == '‚ùî –ò–Ω—Ñ–æ ‚ùî') {
                this.getInfo(ctx);
                return;
            }

            if(msg == '‚òëÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚òëÔ∏è') {
                this.addProduct(ctx);
                return;
            }

            if(msg == 'üìõ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üìõ') {
                this.removeProduct(ctx);
                return;
            }

            if(msg == '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–≤—ã–¥–∞—á–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–µ–∫—Å—Ç–∞)') {
                this.lotType = 'instruction';
                this.addProductName(ctx);
                return;
            }

            if(msg == '–ê–∫–∫–∞—É–Ω—Ç—ã (–≤—ã–¥–∞—á–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏)') {
                this.lotType = 'accounts';
                this.addProductName(ctx);
                return;
            }

            if(msg == 'üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ üìÑ') {
                await this.getAutoIssueFile(ctx);
                return;
            }

            if(msg == 'üîô –ù–∞–∑–∞–¥ üîô') {
                await this.back(ctx);
                return;
            }

            if(this.waitingForLotName) {
                await this.saveLotName(ctx);
                return;
            }

            if(this.waitingForLotContent) {
                await this.saveLotContent(ctx);
                return;
            }

            if(this.waitingForLotDelete) {
                await this.deleteLot(ctx);
                return;
            }

            this.waitingForLotName = false;
            this.waitingForLotContent = false;
            this.waitingForLotDelete = false;
            
            ctx.reply('–ú–µ–Ω—é', this.mainKeyboard.reply());
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ telegram —Å–æ–æ–±—â–µ–Ω–∏—è: ${err}`, 'r');
            ctx.reply(`–í–æ—É! –Ø —Å–ª–æ–≤–∏–ª –æ—à–∏–±–∫—É... –•–∑ –∫–∞–∫ —Ç–∞–∫ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –Ω–æ –≤–æ—Ç –≤—Å—ë, —á—Ç–æ –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ: ${err}`, this.mainKeyboard.reply());
        }
    }

    isUserAuthed(ctx) {
        if(global.settings.userName == ctx.update.message.from.username) {
            if(!getConst('chatId')) setConst('chatId', ctx.update.message.chat.id);
            return true;
        }
        return false;
    }

    getMainKeyboard() {
        const keyboard = Keyboard.make([
            ['üî• –°—Ç–∞—Ç—É—Å üî•'],
            ['üöÄ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É üöÄ'],
            ['‚ùî –ò–Ω—Ñ–æ ‚ùî']
        ]);

        return keyboard;
    }

    getEditGoodsKeyboard() {
        const keyboard = Keyboard.make([
            ['‚òëÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚òëÔ∏è', 'üìõ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üìõ'],
            ['üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ üìÑ'],
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    getSelectIssueTypeKeyboard() {
        const keyboard = Keyboard.make([
            ['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–≤—ã–¥–∞—á–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Ç–µ–∫—Å—Ç–∞)'],
            ['–ê–∫–∫–∞—É–Ω—Ç—ã (–≤—ã–¥–∞—á–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏)'],
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    getBackKeyboard() {
        const keyboard = Keyboard.make([
            ['üîô –ù–∞–∑–∞–¥ üîô']
        ]);

        return keyboard;
    }

    async replyStatus(ctx) {
        const time = Date.now();
        const workTimeDiff = time - global.startTime;
        const lastUpdateTimeDiff = time - global.appData.lastUpdate;

        function declensionNum(num, words) {
            return words[(num % 100 > 4 && num % 100 < 20) ? 2 : [2, 0, 1, 1, 1, 2][(num % 10 < 5) ? num % 10 : 5]];
        }

        function msToTime(ms) {
            let days = ms > 0 ? Math.floor(ms / 1000 / 60 / 60 / 24) : 0;
            let hours = ms > 0 ? Math.floor(ms / 1000 / 60 / 60) % 24 : 0;
            let minutes = ms > 0 ? Math.floor(ms / 1000 / 60) % 60 : 0;
            let seconds = ms > 0 ? Math.floor(ms / 1000) % 60 : 0;
            days = ms < 10 ? '0' + days : days;
            hours = hours < 10 ? '0' + hours : hours;
            minutes = minutes < 10 ? '0' + minutes : minutes;
            seconds = seconds < 10 ? '0' + seconds : seconds;
            const daysTitle = declensionNum(days, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']);
            const hoursTitle = declensionNum(hours, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']);
            const minutesTitle = declensionNum(minutes, ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç']);
            const secondsTitle = declensionNum(seconds, ['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥']);
            return {days: days, hours: hours, minutes: minutes, seconds: seconds, daysTitle: daysTitle, hoursTitle: hoursTitle, minutesTitle: minutesTitle, secondsTitle: secondsTitle};
        }

        const workTimeArr = msToTime(workTimeDiff);
        const workTime = `${workTimeArr.days} ${workTimeArr.daysTitle} ${workTimeArr.hours} ${workTimeArr.hoursTitle} ${workTimeArr.minutes} ${workTimeArr.minutesTitle} ${workTimeArr.seconds} ${workTimeArr.secondsTitle}`;

        const lastUpdateTimeArr = msToTime(lastUpdateTimeDiff);
        const lastUpdateTime = `${lastUpdateTimeArr.minutes} ${lastUpdateTimeArr.minutesTitle} ${lastUpdateTimeArr.seconds} ${lastUpdateTimeArr.secondsTitle}`;

        const autoIssue = (global.settings.autoIssue) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const alwaysOnline = (global.settings.alwaysOnline) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const lotsRaise = (global.settings.lotsRaise) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const goodsStateCheck = (global.settings.goodsStateCheck) ? '–í–∫–ª' : '–í—ã–∫–ª';
        const autoResponse = (global.settings.autoResponse) ? '–í–∫–ª' : '–í—ã–∫–ª';

        const msg = `üî• <b>–°—Ç–∞—Ç—É—Å</b> üî•\n\nüîë –ê–∫–∫–∞—É–Ω—Ç: <code>${global.appData.userName}</code>\nüí∞ –ë–∞–ª–∞–Ω—Å: <code>${global.appData.balance}</code>\nüõçÔ∏è –ü—Ä–æ–¥–∞–∂–∏: <code>${global.appData.sales}</code>\n‚ôªÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: <code>${lastUpdateTime} –Ω–∞–∑–∞–¥</code>\n\nüïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <code>${workTime}</code>\n‚è≤ –í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω: <code>${alwaysOnline}</code>\nüëæ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: <code>${autoResponse}</code>\nüöÄ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞: <code>${autoIssue}</code>\nüèÜ –ê–≤—Ç–æ–ø–æ–¥–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>${lotsRaise}</code>\nüî® –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <code>${goodsStateCheck}</code>\n\n<i><a href="https://t.me/fplite">FunPayServer</a></i>`;
        const params = this.mainKeyboard.reply();
        params.disable_web_page_preview = true;
        ctx.replyWithHTML(msg, params);
    }

    async editAutoIssue(ctx) {
        try {
            const goods = await load('data/configs/delivery.json');
            let goodsStr = '';

            let msg = `üìÑ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b> üìÑ`;
            await ctx.replyWithHTML(msg, this.editGoodsKeyboard.reply());
    
            for(let i = 0; i < goods.length; i++) {
                goodsStr += `[${i + 1}] ${goods[i].name}\n`;
    
                if(goodsStr.length > 3000) {
                    await ctx.replyWithHTML(goodsStr, this.editGoodsKeyboard.reply());
                    goodsStr = '';
                }

                if(i == (goods.length - 1)) {
                    await ctx.replyWithHTML(goodsStr, this.editGoodsKeyboard.reply());
                }
            }
        } catch (err) {
            log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${err}`, 'r');
        }
    }

    getInfo(ctx) {
        const msg = `‚ùî <b>FunPayServer</b> ‚ùî\n\n<b>FunPayServer</b> - —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–ª–æ—â–∞–¥–∫–∏ funpay.com —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π <b>NightStranger</b>.\n\n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –≤—Å–µ–º, –∫—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç ‚ù§Ô∏è. –û–Ω –∂–∏–≤—ë—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º.\n\n<a href="https://github.com/NightStrang6r/FunPayServer">GitHub</a> | <a href="https://github.com/NightStrang6r/FunPayServer">–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç</a>`;
        ctx.replyWithHTML(msg);
    }

    addProduct(ctx) {
        ctx.replyWithHTML(`–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è`, this.selectIssueTypeKeyboard.reply());
    }

    addProductName(ctx) {
        ctx.replyWithHTML(`–û–∫–µ–π, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–≤–∞—Ç—å –µ–≥–æ –∏–∑ funpay. –≠–º–æ–¥–∑–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.`);
        this.waitingForLotName = true;
    }

    removeProduct(ctx) {
        ctx.replyWithHTML(`–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.`);
        this.waitingForLotDelete = true;
    }

    async back(ctx) {
        this.waitingForLotName = false;
        this.waitingForLotContent = false;
        this.waitingForLotDelete = false;

        if(this.products.length > 0) {
            let goods = await load('data/configs/delivery.json');

            const product = {
                "name": this.lotName,
                "nodes": this.products
            }

            goods.push(product);
            await updateFile(goods, 'data/configs/delivery.json');
            this.products = [];
        }

        ctx.reply('–ú–µ–Ω—é', this.mainKeyboard.reply());
    }

    async saveLotName(ctx) {
        const msg = ctx.update.message.text;

        this.waitingForLotName = false;
        this.lotName = msg;

        let replyMessage = '–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.';
        if(this.lotType == 'accounts') {
            replyMessage = '–ü–æ–Ω—è–ª-–ø—Ä–∏–Ω—è–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏. –ù–∞–∂–º–∏ "üîô –ù–∞–∑–∞–¥ üîô" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–≤–∞—Ä.';
        }

        ctx.reply(replyMessage, this.backKeyboard.reply());
        this.waitingForLotContent = true;
    }

    async saveLotContent(ctx) {
        const msg = ctx.update.message.text;

        this.lotContent = msg;
        let keyboard = this.backKeyboard;
        let goods = await load('data/configs/delivery.json');

        if(this.lotType != 'accounts') {
            this.waitingForLotContent = false;
            keyboard = this.mainKeyboard;

            const product = {
                "name": this.lotName,
                "message": this.lotContent
            }
    
            goods.push(product);
            await updateFile(goods, 'data/configs/delivery.json');

            this.lotName = '';
            this.lotContent = '';
        } else {
            keyboard = this.backKeyboard;

            this.products.push(msg);
        }

        ctx.reply(`–û–∫–µ–π, —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–æ–≤–∞—Ä.`, keyboard.reply());
    }

    async deleteLot(ctx) {
        const msg = ctx.update.message.text;
        this.waitingForLotDelete = false;

        let num = Number(msg);
        if(isNaN(num)) {
            ctx.reply(`–ß—Ç–æ-—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ... –í–µ—Ä–Ω—É —Ç–µ–±—è –≤ –º–µ–Ω—é.`, this.mainKeyboard.reply());
            return;
        }

        let goods = await load('data/configs/delivery.json');
        if(num > goods.length || num < 0) {
            ctx.reply(`–¢–∞–∫–æ–≥–æ id –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏. –í–µ—Ä–Ω—É —Ç–µ–±—è –≤ –º–µ–Ω—é.`, this.mainKeyboard.reply());
            return;
        }

        let name = goods[num - 1].name;
        goods.splice(num - 1, 1);
        await updateFile(goods, 'data/configs/delivery.json');

        ctx.reply(`–û–∫, —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä "${name}" –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.`, this.mainKeyboard.reply());
    }

    async getAutoIssueFile(ctx) {
        let contents = getConst('autoIssueFilePath');

        ctx.replyWithDocument({
            source: contents,
            filename: 'delivery.json'
        }).catch(function(error) { log(error); })
    }

    async onInlineQuery(ctx) {
        console.log(ctx);
    }

    getChatID() {
        let chatId = getConst('chatId');
        if(!chatId) {
            log(`–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ–º—É –±–æ—Ç—É –≤ Telegram, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.`);
            return false;
        }
        return chatId;
    }

    async sendNewMessageNotification(message) {
        let msg = `üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b><i>${message.user}</i></b>.\n\n`;
        msg += `${message.content}\n\n`;
        msg += `<i>${message.time}</i> | <a href="https://funpay.com/chat/?node=${message.node}">–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç</a>`

        let chatId = this.getChatID();
        if(!chatId) return;
        this.bot.telegram.sendMessage(chatId, msg, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
    }

    async sendNewOrderNotification(order) {
        let msg = `‚úîÔ∏è <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b> <a href="https://funpay.com/orders/${order.id.replace('#', '')}/">${order.id}</a> –Ω–∞ —Å—É–º–º—É <b><i>${order.price} ${order.unit}</i></b>.\n\n`;
        msg += `üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> <a href="https://funpay.com/users/${order.buyerId}/">${order.buyerName}</a>\n`;
        msg += `üõçÔ∏è <b>–¢–æ–≤–∞—Ä:</b> <code>${order.name}</code>`;

        let chatId = this.getChatID();
        if(!chatId) return;
        this.bot.telegram.sendMessage(chatId, msg, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
    }

    async sendLotsRaiseNotification(category, nextTimeMsg) {
        let msg = `‚¨ÜÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <a href="https://funpay.com/lots/${category.node_id}/trade">${category.name}</a> –ø–æ–¥–Ω—è—Ç—ã.\n`;
        msg += `‚åö –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥–Ω—è—Ç–∏–µ: <b><i>${nextTimeMsg}</i></b>`;

        let chatId = this.getChatID();
        if(!chatId) return;
        this.bot.telegram.sendMessage(chatId, msg, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
    }

    async sendDeliveryNotification(buyerName, productName, message) {
        let msg = `üì¶ –¢–æ–≤–∞—Ä <code>${productName}</code> –≤—ã–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é <b><i>${buyerName}</i></b> —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n`;
        msg += `${message}`;

        let chatId = this.getChatID();
        if(!chatId) return;
        this.bot.telegram.sendMessage(chatId, msg, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
    }
}

export default TelegramBot;